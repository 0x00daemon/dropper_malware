import tkinter as tk
from tkinter import ttk
from ttkthemes import ThemedStyle
import additional_options  # Import the additional_options.py file
import os

# username

uname = os.getlogin()

# Define functions for calculator operations
def perform_operation(operation):
    try:
        num1 = float(entry_num1.get())
        num2 = float(entry_num2.get())

        if operation == "Add":
            result.set(num1 + num2)
        elif operation == "Subtract":
            result.set(num1 - num2)
        elif operation == "Multiply":
            result.set(num1 * num2)
        elif operation == "Divide":
            if num2 != 0:
                result.set(num1 / num2)
            else:
                result.set("Cannot divide by zero")
    except ValueError:
        result.set("Invalid input")

def reset():
    entry_num1.delete(0, tk.END)
    entry_num2.delete(0, tk.END)
    result.set("Result: ")

def open_additional_options():
    additional_options.scientific_calculator()  # Call the function from additional_options.py

# Create the main application window
app = tk.Tk()
icon_path = f"C:\\NightHawks.Cloud\\NightHawks.Calculator\\raw_files\\logo.ico"
app.iconbitmap(icon_path)
app.title("NightHawks Calculator")

# Create a themed style for the GUI
style = ThemedStyle(app)
style.set_theme("clearlooks")  # There are other themes available as well such as default

# Create a frame to contain the logo and center it at the top
logo_frame = ttk.Frame(app)
logo_frame.grid(row=0, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

# Add a logo in the center of the logo frame
logo_path = f"C:\\NightHawks.Cloud\\NightHawks.Calculator\\raw_files\\logo.png"
logo_image = tk.PhotoImage(file=logo_path)  # Replace "logo.png" with your logo file
logo_label = tk.Label(logo_frame, image=logo_image)
logo_label.grid(row=0, column=0, padx=10, pady=10)

# Create entry fields for numbers and result
entry_num1 = ttk.Entry(app)
entry_num1.grid(row=1, column=0, padx=10, pady=10, sticky="ew")

entry_num2 = ttk.Entry(app)
entry_num2.grid(row=1, column=1, padx=10, pady=10, sticky="ew")

# Create buttons for each operation with custom colors
button_style = {"padding": 10, "width": 10}
operations = ["Add", "Subtract", "Multiply", "Divide"]
row = 2
col = 0
for operation in operations:
    ttk.Button(app, text=operation, command=lambda op=operation: perform_operation(op), style="TButton", **button_style).grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
    col += 1
    if col > 1:
        col = 0
        row += 1

# Create a "Reset" button with custom colors
ttk.Button(app, text="Reset", command=reset, style="TButton", **button_style).grid(row=row, column=0, padx=10, pady=10, columnspan=2, sticky="nsew")

# Create a "Additional Options" button with custom colors
row += 1
ttk.Button(app, text="Additional Options", command=open_additional_options, style="TButton", **button_style).grid(row=row, column=0, padx=10, pady=10, columnspan=2, sticky="nsew")

# Create a label to display the result with custom formatting
row += 1
result = tk.StringVar()
result.set("Result: ")
result_label = ttk.Label(app, textvariable=result, font=("Helvetica", 16))
result_label.grid(row=row, column=0, padx=10, pady=10, columnspan=2, sticky="nsew")

# Configure grid rows and columns to expand with window resizing
for i in range(row + 1):
    app.grid_rowconfigure(i, weight=1)
app.grid_columnconfigure(0, weight=1)
app.grid_columnconfigure(1, weight=1)

# Start the main event loop
app.mainloop()