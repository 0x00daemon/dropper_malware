import tkinter as tk
from tkinter import ttk
from ttkthemes import ThemedStyle
import webbrowser
import additional_options  # Import the additional_options.py file

# Define functions for calculator operations
def perform_operation(operation):
    try:
        num1 = float(entry_num1.get())
        num2 = float(entry_num2.get())

        if operation == "Add":
            result.set(num1 + num2)
        elif operation == "Subtract":
            result.set(num1 - num2)
        elif operation == "Multiply":
            result.set(num1 * num2)
        elif operation == "Divide":
            if num2 != 0:
                result.set(num1 / num2)
            else:
                result.set("Cannot divide by zero")
    except ValueError:
        result.set("Invalid input")

def reset():
    entry_num1.delete(0, tk.END)
    entry_num2.delete(0, tk.END)
    result.set("Result: ")

def open_additional_options():
    additional_options.additional_options()  # Call the function from additional_options.py

# Create the main application window
app = tk.Tk()
app.title("Cute Calculator")

# Create a themed style for the GUI
style = ThemedStyle(app)
style.set_theme("clearlooks")  # You can choose other themes as well

# Add a logo in the top-right corner
logo_image = tk.PhotoImage(file="logo.png")  # Replace "logo.png" with your logo file
logo_label = tk.Label(app, image=logo_image)
logo_label.grid(row=0, column=3, padx=10, pady=10, sticky="ne")

# Create entry fields for numbers and result
entry_num1 = ttk.Entry(app)
entry_num1.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

operation_label = ttk.Label(app, text="Choose operation:")
operation_label.grid(row=0, column=1, padx=10, pady=10)

entry_num2 = ttk.Entry(app)
entry_num2.grid(row=0, column=2, padx=10, pady=10, sticky="ew")

# Create buttons for each operation with custom colors
button_style = {"padding": 10, "width": 10}
operations = ["Add", "Subtract", "Multiply", "Divide"]
for i, operation in enumerate(operations):
    ttk.Button(app, text=operation, command=lambda op=operation: perform_operation(op), style="TButton", **button_style).grid(row=1, column=i, padx=10, pady=10, sticky="nsew")

# Create a "Reset" button with custom colors
ttk.Button(app, text="Reset", command=reset, style="TButton", **button_style).grid(row=2, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")

# Create a "Additional Options" button with custom colors
ttk.Button(app, text="Additional Options", command=open_additional_options, style="TButton", **button_style).grid(row=3, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")

# Create a label to display the result with custom formatting
result = tk.StringVar()
result.set("Result: ")
result_label = ttk.Label(app, textvariable=result, font=("Helvetica", 16))
result_label.grid(row=4, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")

# Configure grid rows and columns to expand with window resizing
for i in range(4):
    app.grid_rowconfigure(i, weight=1)
    app.grid_columnconfigure(i, weight=1)

# Start the main event loop
app.mainloop()
